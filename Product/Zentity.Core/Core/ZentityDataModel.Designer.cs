//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Zentity.Core", "RelationshipPredicateIs", "Predicate", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Predicate), "Relationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.Relationship))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "ResourcePropertyIs", "Property", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Property), "ResourceProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.ResourceProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "PredicatePropertyIs", "Property", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Property), "PredicateProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.PredicateProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "TripletPropertyIs", "Property", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Property), "RelationshipProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.RelationshipProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "RelationshipHasProperty", "Relationship", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Relationship), "RelationshipProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.RelationshipProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "RelationshipIsAboutResource", "Resource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Resource), "Relationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.Relationship))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "ResourceHasRelationship", "Resource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Resource), "Relationship", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.Relationship))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "ResourceHasProperty", "Resource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Resource), "ResourceProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.ResourceProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "PredicateHasProperty", "Predicate", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Zentity.Core.Predicate), "PredicateProperty", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.PredicateProperty))]
[assembly: EdmRelationshipAttribute("Zentity.Core", "ResourceHasFile", "Resource", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.Resource), "File", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Zentity.Core.File))]

#endregion

namespace Zentity.Core
{
    #region Contexts
    
    /// <summary>
    /// Represents the context to interact with the repository.
    /// </summary>
    public partial class ZentityContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new ZentityContext object using the connection string found in the 'ZentityContext' section of the application configuration file.
        /// </summary>
        public ZentityContext() : base("name=ZentityContext", "ZentityContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ZentityContext object.
        /// </summary>
        public ZentityContext(string connectionString) : base(connectionString, "ZentityContext")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new ZentityContext object.
        /// </summary>
        public ZentityContext(EntityConnection connection) : base(connection, "ZentityContext")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// A set of all the Predicate objects in the repository.
        /// </summary>
        public ObjectSet<Predicate> Predicates
        {
            get
            {
                if ((_Predicates == null))
                {
                    _Predicates = base.CreateObjectSet<Predicate>("Predicates");
                }
                return _Predicates;
            }
        }
        private ObjectSet<Predicate> _Predicates;
    
        /// <summary>
        /// A set of all the PredicateProperty objects in the repository.
        /// </summary>
        public ObjectSet<PredicateProperty> PredicateProperties
        {
            get
            {
                if ((_PredicateProperties == null))
                {
                    _PredicateProperties = base.CreateObjectSet<PredicateProperty>("PredicateProperties");
                }
                return _PredicateProperties;
            }
        }
        private ObjectSet<PredicateProperty> _PredicateProperties;
    
        /// <summary>
        /// A set of all the Property objects in the repository.
        /// </summary>
        public ObjectSet<Property> Properties
        {
            get
            {
                if ((_Properties == null))
                {
                    _Properties = base.CreateObjectSet<Property>("Properties");
                }
                return _Properties;
            }
        }
        private ObjectSet<Property> _Properties;
    
        /// <summary>
        /// A set of all the Relationship objects in the repository.
        /// </summary>
        public ObjectSet<Relationship> Relationships
        {
            get
            {
                if ((_Relationships == null))
                {
                    _Relationships = base.CreateObjectSet<Relationship>("Relationships");
                }
                return _Relationships;
            }
        }
        private ObjectSet<Relationship> _Relationships;
    
        /// <summary>
        /// A set of all the RelationshipProperty objects in the repository.
        /// </summary>
        public ObjectSet<RelationshipProperty> RelationshipProperties
        {
            get
            {
                if ((_RelationshipProperties == null))
                {
                    _RelationshipProperties = base.CreateObjectSet<RelationshipProperty>("RelationshipProperties");
                }
                return _RelationshipProperties;
            }
        }
        private ObjectSet<RelationshipProperty> _RelationshipProperties;
    
        /// <summary>
        /// A set of all the Resources in the repository.
        /// </summary>
        public ObjectSet<Resource> Resources
        {
            get
            {
                if ((_Resources == null))
                {
                    _Resources = base.CreateObjectSet<Resource>("Resources");
                }
                return _Resources;
            }
        }
        private ObjectSet<Resource> _Resources;
    
        /// <summary>
        /// A set of all the ResourceProperty objects in the repository.
        /// </summary>
        public ObjectSet<ResourceProperty> ResourceProperties
        {
            get
            {
                if ((_ResourceProperties == null))
                {
                    _ResourceProperties = base.CreateObjectSet<ResourceProperty>("ResourceProperties");
                }
                return _ResourceProperties;
            }
        }
        private ObjectSet<ResourceProperty> _ResourceProperties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FlattenedFile> FlattenedFiles
        {
            get
            {
                if ((_FlattenedFiles == null))
                {
                    _FlattenedFiles = base.CreateObjectSet<FlattenedFile>("FlattenedFiles");
                }
                return _FlattenedFiles;
            }
        }
        private ObjectSet<FlattenedFile> _FlattenedFiles;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Predicates EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPredicates(Predicate predicate)
        {
            base.AddObject("Predicates", predicate);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PredicateProperties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPredicateProperties(PredicateProperty predicateProperty)
        {
            base.AddObject("PredicateProperties", predicateProperty);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Properties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToProperties(Property property)
        {
            base.AddObject("Properties", property);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Relationships EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRelationships(Relationship relationship)
        {
            base.AddObject("Relationships", relationship);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RelationshipProperties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRelationshipProperties(RelationshipProperty relationshipProperty)
        {
            base.AddObject("RelationshipProperties", relationshipProperty);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Resources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResources(Resource resource)
        {
            base.AddObject("Resources", resource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ResourceProperties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResourceProperties(ResourceProperty resourceProperty)
        {
            base.AddObject("ResourceProperties", resourceProperty);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FlattenedFiles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFlattenedFiles(FlattenedFile flattenedFile)
        {
            base.AddObject("FlattenedFiles", flattenedFile);
        }

        #endregion
        #region Function Imports
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        public int DeleteFile(Nullable<global::System.Guid> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteFile", idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="subjectResourceId">No Metadata Documentation available.</param>
        /// <param name="objectResourceId">No Metadata Documentation available.</param>
        /// <param name="predicateId">No Metadata Documentation available.</param>
        public int DeleteRelationship(Nullable<global::System.Guid> id, Nullable<global::System.Guid> subjectResourceId, Nullable<global::System.Guid> objectResourceId, Nullable<global::System.Guid> predicateId)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter subjectResourceIdParameter;
            if (subjectResourceId.HasValue)
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", subjectResourceId);
            }
            else
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter objectResourceIdParameter;
            if (objectResourceId.HasValue)
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", objectResourceId);
            }
            else
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter predicateIdParameter;
            if (predicateId.HasValue)
            {
                predicateIdParameter = new ObjectParameter("PredicateId", predicateId);
            }
            else
            {
                predicateIdParameter = new ObjectParameter("PredicateId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteRelationship", idParameter, subjectResourceIdParameter, objectResourceIdParameter, predicateIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        public int DeleteResource(Nullable<global::System.Guid> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteResource", idParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        /// <param name="dateModified">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="uri">No Metadata Documentation available.</param>
        /// <param name="checksum">No Metadata Documentation available.</param>
        /// <param name="fileExtension">No Metadata Documentation available.</param>
        /// <param name="mimeType">No Metadata Documentation available.</param>
        /// <param name="size">No Metadata Documentation available.</param>
        public int InsertFile(Nullable<global::System.Guid> id, Nullable<global::System.DateTime> dateAdded, Nullable<global::System.DateTime> dateModified, global::System.String description, global::System.String title, global::System.String uri, global::System.String checksum, global::System.String fileExtension, global::System.String mimeType, Nullable<global::System.Int64> size)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateModifiedParameter;
            if (dateModified.HasValue)
            {
                dateModifiedParameter = new ObjectParameter("DateModified", dateModified);
            }
            else
            {
                dateModifiedParameter = new ObjectParameter("DateModified", typeof(global::System.DateTime));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter uriParameter;
            if (uri != null)
            {
                uriParameter = new ObjectParameter("Uri", uri);
            }
            else
            {
                uriParameter = new ObjectParameter("Uri", typeof(global::System.String));
            }
    
            ObjectParameter checksumParameter;
            if (checksum != null)
            {
                checksumParameter = new ObjectParameter("Checksum", checksum);
            }
            else
            {
                checksumParameter = new ObjectParameter("Checksum", typeof(global::System.String));
            }
    
            ObjectParameter fileExtensionParameter;
            if (fileExtension != null)
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", fileExtension);
            }
            else
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", typeof(global::System.String));
            }
    
            ObjectParameter mimeTypeParameter;
            if (mimeType != null)
            {
                mimeTypeParameter = new ObjectParameter("MimeType", mimeType);
            }
            else
            {
                mimeTypeParameter = new ObjectParameter("MimeType", typeof(global::System.String));
            }
    
            ObjectParameter sizeParameter;
            if (size.HasValue)
            {
                sizeParameter = new ObjectParameter("Size", size);
            }
            else
            {
                sizeParameter = new ObjectParameter("Size", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction("InsertFile", idParameter, dateAddedParameter, dateModifiedParameter, descriptionParameter, titleParameter, uriParameter, checksumParameter, fileExtensionParameter, mimeTypeParameter, sizeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="subjectResourceId">No Metadata Documentation available.</param>
        /// <param name="objectResourceId">No Metadata Documentation available.</param>
        /// <param name="predicateId">No Metadata Documentation available.</param>
        /// <param name="ordinalPosition">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        public int InsertRelationship(Nullable<global::System.Guid> id, Nullable<global::System.Guid> subjectResourceId, Nullable<global::System.Guid> objectResourceId, Nullable<global::System.Guid> predicateId, Nullable<global::System.Int32> ordinalPosition, Nullable<global::System.DateTime> dateAdded)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter subjectResourceIdParameter;
            if (subjectResourceId.HasValue)
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", subjectResourceId);
            }
            else
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter objectResourceIdParameter;
            if (objectResourceId.HasValue)
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", objectResourceId);
            }
            else
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter predicateIdParameter;
            if (predicateId.HasValue)
            {
                predicateIdParameter = new ObjectParameter("PredicateId", predicateId);
            }
            else
            {
                predicateIdParameter = new ObjectParameter("PredicateId", typeof(global::System.Guid));
            }
    
            ObjectParameter ordinalPositionParameter;
            if (ordinalPosition.HasValue)
            {
                ordinalPositionParameter = new ObjectParameter("OrdinalPosition", ordinalPosition);
            }
            else
            {
                ordinalPositionParameter = new ObjectParameter("OrdinalPosition", typeof(global::System.Int32));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("InsertRelationship", idParameter, subjectResourceIdParameter, objectResourceIdParameter, predicateIdParameter, ordinalPositionParameter, dateAddedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        /// <param name="dateModified">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="uri">No Metadata Documentation available.</param>
        public int InsertResource(Nullable<global::System.Guid> id, Nullable<global::System.DateTime> dateAdded, Nullable<global::System.DateTime> dateModified, global::System.String description, global::System.String title, global::System.String uri)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateModifiedParameter;
            if (dateModified.HasValue)
            {
                dateModifiedParameter = new ObjectParameter("DateModified", dateModified);
            }
            else
            {
                dateModifiedParameter = new ObjectParameter("DateModified", typeof(global::System.DateTime));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter uriParameter;
            if (uri != null)
            {
                uriParameter = new ObjectParameter("Uri", uri);
            }
            else
            {
                uriParameter = new ObjectParameter("Uri", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("InsertResource", idParameter, dateAddedParameter, dateModifiedParameter, descriptionParameter, titleParameter, uriParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        /// <param name="dateModified">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="uri">No Metadata Documentation available.</param>
        /// <param name="checksum">No Metadata Documentation available.</param>
        /// <param name="fileExtension">No Metadata Documentation available.</param>
        /// <param name="mimeType">No Metadata Documentation available.</param>
        /// <param name="size">No Metadata Documentation available.</param>
        public int UpdateFile(Nullable<global::System.Guid> id, Nullable<global::System.DateTime> dateAdded, Nullable<global::System.DateTime> dateModified, global::System.String description, global::System.String title, global::System.String uri, global::System.String checksum, global::System.String fileExtension, global::System.String mimeType, Nullable<global::System.Int64> size)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateModifiedParameter;
            if (dateModified.HasValue)
            {
                dateModifiedParameter = new ObjectParameter("DateModified", dateModified);
            }
            else
            {
                dateModifiedParameter = new ObjectParameter("DateModified", typeof(global::System.DateTime));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter uriParameter;
            if (uri != null)
            {
                uriParameter = new ObjectParameter("Uri", uri);
            }
            else
            {
                uriParameter = new ObjectParameter("Uri", typeof(global::System.String));
            }
    
            ObjectParameter checksumParameter;
            if (checksum != null)
            {
                checksumParameter = new ObjectParameter("Checksum", checksum);
            }
            else
            {
                checksumParameter = new ObjectParameter("Checksum", typeof(global::System.String));
            }
    
            ObjectParameter fileExtensionParameter;
            if (fileExtension != null)
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", fileExtension);
            }
            else
            {
                fileExtensionParameter = new ObjectParameter("FileExtension", typeof(global::System.String));
            }
    
            ObjectParameter mimeTypeParameter;
            if (mimeType != null)
            {
                mimeTypeParameter = new ObjectParameter("MimeType", mimeType);
            }
            else
            {
                mimeTypeParameter = new ObjectParameter("MimeType", typeof(global::System.String));
            }
    
            ObjectParameter sizeParameter;
            if (size.HasValue)
            {
                sizeParameter = new ObjectParameter("Size", size);
            }
            else
            {
                sizeParameter = new ObjectParameter("Size", typeof(global::System.Int64));
            }
    
            return base.ExecuteFunction("UpdateFile", idParameter, dateAddedParameter, dateModifiedParameter, descriptionParameter, titleParameter, uriParameter, checksumParameter, fileExtensionParameter, mimeTypeParameter, sizeParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="subjectResourceId">No Metadata Documentation available.</param>
        /// <param name="objectResourceId">No Metadata Documentation available.</param>
        /// <param name="predicateId">No Metadata Documentation available.</param>
        /// <param name="ordinalPosition">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        public int UpdateRelationship(Nullable<global::System.Guid> id, Nullable<global::System.Guid> subjectResourceId, Nullable<global::System.Guid> objectResourceId, Nullable<global::System.Guid> predicateId, Nullable<global::System.Int32> ordinalPosition, Nullable<global::System.DateTime> dateAdded)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter subjectResourceIdParameter;
            if (subjectResourceId.HasValue)
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", subjectResourceId);
            }
            else
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter objectResourceIdParameter;
            if (objectResourceId.HasValue)
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", objectResourceId);
            }
            else
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter predicateIdParameter;
            if (predicateId.HasValue)
            {
                predicateIdParameter = new ObjectParameter("PredicateId", predicateId);
            }
            else
            {
                predicateIdParameter = new ObjectParameter("PredicateId", typeof(global::System.Guid));
            }
    
            ObjectParameter ordinalPositionParameter;
            if (ordinalPosition.HasValue)
            {
                ordinalPositionParameter = new ObjectParameter("OrdinalPosition", ordinalPosition);
            }
            else
            {
                ordinalPositionParameter = new ObjectParameter("OrdinalPosition", typeof(global::System.Int32));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdateRelationship", idParameter, subjectResourceIdParameter, objectResourceIdParameter, predicateIdParameter, ordinalPositionParameter, dateAddedParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="id">No Metadata Documentation available.</param>
        /// <param name="dateAdded">No Metadata Documentation available.</param>
        /// <param name="dateModified">No Metadata Documentation available.</param>
        /// <param name="description">No Metadata Documentation available.</param>
        /// <param name="title">No Metadata Documentation available.</param>
        /// <param name="uri">No Metadata Documentation available.</param>
        public int UpdateResource(Nullable<global::System.Guid> id, Nullable<global::System.DateTime> dateAdded, Nullable<global::System.DateTime> dateModified, global::System.String description, global::System.String title, global::System.String uri)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("Id", id);
            }
            else
            {
                idParameter = new ObjectParameter("Id", typeof(global::System.Guid));
            }
    
            ObjectParameter dateAddedParameter;
            if (dateAdded.HasValue)
            {
                dateAddedParameter = new ObjectParameter("DateAdded", dateAdded);
            }
            else
            {
                dateAddedParameter = new ObjectParameter("DateAdded", typeof(global::System.DateTime));
            }
    
            ObjectParameter dateModifiedParameter;
            if (dateModified.HasValue)
            {
                dateModifiedParameter = new ObjectParameter("DateModified", dateModified);
            }
            else
            {
                dateModifiedParameter = new ObjectParameter("DateModified", typeof(global::System.DateTime));
            }
    
            ObjectParameter descriptionParameter;
            if (description != null)
            {
                descriptionParameter = new ObjectParameter("Description", description);
            }
            else
            {
                descriptionParameter = new ObjectParameter("Description", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter uriParameter;
            if (uri != null)
            {
                uriParameter = new ObjectParameter("Uri", uri);
            }
            else
            {
                uriParameter = new ObjectParameter("Uri", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateResource", idParameter, dateAddedParameter, dateModifiedParameter, descriptionParameter, titleParameter, uriParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="subjectResourceId">No Metadata Documentation available.</param>
        /// <param name="objectResourceId">No Metadata Documentation available.</param>
        public int DeleteResourceHasFile(Nullable<global::System.Guid> subjectResourceId, Nullable<global::System.Guid> objectResourceId)
        {
            ObjectParameter subjectResourceIdParameter;
            if (subjectResourceId.HasValue)
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", subjectResourceId);
            }
            else
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter objectResourceIdParameter;
            if (objectResourceId.HasValue)
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", objectResourceId);
            }
            else
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("DeleteResourceHasFile", subjectResourceIdParameter, objectResourceIdParameter);
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        /// <param name="subjectResourceId">No Metadata Documentation available.</param>
        /// <param name="objectResourceId">No Metadata Documentation available.</param>
        public int InsertResourceHasFile(Nullable<global::System.Guid> subjectResourceId, Nullable<global::System.Guid> objectResourceId)
        {
            ObjectParameter subjectResourceIdParameter;
            if (subjectResourceId.HasValue)
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", subjectResourceId);
            }
            else
            {
                subjectResourceIdParameter = new ObjectParameter("SubjectResourceId", typeof(global::System.Guid));
            }
    
            ObjectParameter objectResourceIdParameter;
            if (objectResourceId.HasValue)
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", objectResourceId);
            }
            else
            {
                objectResourceIdParameter = new ObjectParameter("ObjectResourceId", typeof(global::System.Guid));
            }
    
            return base.ExecuteFunction("InsertResourceHasFile", subjectResourceIdParameter, objectResourceIdParameter);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// Represents a binary file. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="File")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class File : Resource
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new File object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static File CreateFile(global::System.Guid id)
        {
            File file = new File();
            file.Id = id;
            return file;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets or sets the hash value of file data. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Checksum
        {
            get
            {
                return _Checksum;
            }
            set
            {
                OnChecksumChanging(value);
                ReportPropertyChanging("Checksum");
                _Checksum = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Checksum");
                OnChecksumChanged();
            }
        }
        private global::System.String _Checksum;
        partial void OnChecksumChanging(global::System.String value);
        partial void OnChecksumChanged();
    
        /// <summary>
        /// Gets or sets the extension of file. This property value is used for full text indexing purposes.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FileExtension
        {
            get
            {
                return _FileExtension;
            }
            set
            {
                OnFileExtensionChanging(value);
                ReportPropertyChanging("FileExtension");
                _FileExtension = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FileExtension");
                OnFileExtensionChanged();
            }
        }
        private global::System.String _FileExtension;
        partial void OnFileExtensionChanging(global::System.String value);
        partial void OnFileExtensionChanged();
    
        /// <summary>
        /// Gets or sets the MIME type of file. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MimeType
        {
            get
            {
                return _MimeType;
            }
            set
            {
                OnMimeTypeChanging(value);
                ReportPropertyChanging("MimeType");
                _MimeType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MimeType");
                OnMimeTypeChanged();
            }
        }
        private global::System.String _MimeType;
        partial void OnMimeTypeChanging(global::System.String value);
        partial void OnMimeTypeChanged();
    
        /// <summary>
        /// Gets or sets the size of file. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private Nullable<global::System.Int64> _Size;
        partial void OnSizeChanging(Nullable<global::System.Int64> value);
        partial void OnSizeChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets the associated resources with this File.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasFile", "Resource")]
        public EntityCollection<Resource> Resources
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Resource>("Zentity.Core.ResourceHasFile", "Resource");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Resource>("Zentity.Core.ResourceHasFile", "Resource", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="FlattenedFile")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FlattenedFile : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FlattenedFile object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static FlattenedFile CreateFlattenedFile(global::System.Guid id)
        {
            FlattenedFile flattenedFile = new FlattenedFile();
            flattenedFile.Id = id;
            return flattenedFile;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateAdded;
        partial void OnDateAddedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateModified
        {
            get
            {
                return _DateModified;
            }
            set
            {
                OnDateModifiedChanging(value);
                ReportPropertyChanging("DateModified");
                _DateModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateModified");
                OnDateModifiedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateModified;
        partial void OnDateModifiedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateModifiedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Uri
        {
            get
            {
                return _Uri;
            }
            set
            {
                OnUriChanging(value);
                ReportPropertyChanging("Uri");
                _Uri = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Uri");
                OnUriChanged();
            }
        }
        private global::System.String _Uri;
        partial void OnUriChanging(global::System.String value);
        partial void OnUriChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Checksum
        {
            get
            {
                return _Checksum;
            }
            set
            {
                OnChecksumChanging(value);
                ReportPropertyChanging("Checksum");
                _Checksum = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Checksum");
                OnChecksumChanged();
            }
        }
        private global::System.String _Checksum;
        partial void OnChecksumChanging(global::System.String value);
        partial void OnChecksumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FileExtension
        {
            get
            {
                return _FileExtension;
            }
            set
            {
                OnFileExtensionChanging(value);
                ReportPropertyChanging("FileExtension");
                _FileExtension = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("FileExtension");
                OnFileExtensionChanged();
            }
        }
        private global::System.String _FileExtension;
        partial void OnFileExtensionChanging(global::System.String value);
        partial void OnFileExtensionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MimeType
        {
            get
            {
                return _MimeType;
            }
            set
            {
                OnMimeTypeChanging(value);
                ReportPropertyChanging("MimeType");
                _MimeType = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MimeType");
                OnMimeTypeChanged();
            }
        }
        private global::System.String _MimeType;
        partial void OnMimeTypeChanging(global::System.String value);
        partial void OnMimeTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private Nullable<global::System.Int64> _Size;
        partial void OnSizeChanging(Nullable<global::System.Int64> value);
        partial void OnSizeChanged();

        #endregion
    
    }
    
    /// <summary>
    /// Represents the nature of relationships between two resources. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="Predicate")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Predicate : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Predicate object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="uri">Initial value of the Uri property.</param>
        public static Predicate CreatePredicate(global::System.Guid id, global::System.String name, global::System.String uri)
        {
            Predicate predicate = new Predicate();
            predicate.Id = id;
            predicate.Name = name;
            predicate.Uri = uri;
            return predicate;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the Predicate. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the Name for this predicate. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Gets or sets the URI for this predicate. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Uri
        {
            get
            {
                return _Uri;
            }
            set
            {
                OnUriChanging(value);
                ReportPropertyChanging("Uri");
                _Uri = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Uri");
                OnUriChanged();
            }
        }
        private global::System.String _Uri;
        partial void OnUriChanging(global::System.String value);
        partial void OnUriChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets the resource-to-resource relationships that use this predicate. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipPredicateIs", "Relationship")]
        public EntityCollection<Relationship> Relationships
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Relationship>("Zentity.Core.RelationshipPredicateIs", "Relationship");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Relationship>("Zentity.Core.RelationshipPredicateIs", "Relationship", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the properties of this predicate. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "PredicateHasProperty", "PredicateProperty")]
        public EntityCollection<PredicateProperty> Properties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PredicateProperty>("Zentity.Core.PredicateHasProperty", "PredicateProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PredicateProperty>("Zentity.Core.PredicateHasProperty", "PredicateProperty", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// The PredicateProperty object provides a value for a Property on a Predicate. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="PredicateProperty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PredicateProperty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PredicateProperty object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static PredicateProperty CreatePredicateProperty(global::System.Guid id, global::System.String value)
        {
            PredicateProperty predicateProperty = new PredicateProperty();
            predicateProperty.Id = id;
            predicateProperty.Value = value;
            return predicateProperty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the PredicateProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the value of this PredicateProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets or sets the Property whose value is provided by this PredicateProperty. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "PredicatePropertyIs", "Property")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.PredicatePropertyIs", "Property").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.PredicatePropertyIs", "Property").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Property whose value is provided by this PredicateProperty. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.PredicatePropertyIs", "Property");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("Zentity.Core.PredicatePropertyIs", "Property", value);
                }
            }
        }
    
        /// <summary>
        /// Gets or sets the Predicate to which this PredicateProperty belongs. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "PredicateHasProperty", "Predicate")]
        public Predicate Predicate
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.PredicateHasProperty", "Predicate").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.PredicateHasProperty", "Predicate").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Predicate to which this PredicateProperty belongs. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Predicate> PredicateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.PredicateHasProperty", "Predicate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Predicate>("Zentity.Core.PredicateHasProperty", "Predicate", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Represents a characteristic of a resource in the repository. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="Property")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Property : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Property object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Property CreateProperty(global::System.Guid id, global::System.String name)
        {
            Property property = new Property();
            property.Id = id;
            property.Name = name;
            return property;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the property. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the name of the property. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Gets or sets the Uri of the property. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Uri
        {
            get
            {
                return _Uri;
            }
            set
            {
                OnUriChanging(value);
                ReportPropertyChanging("Uri");
                _Uri = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Uri");
                OnUriChanged();
            }
        }
        private global::System.String _Uri;
        partial void OnUriChanging(global::System.String value);
        partial void OnUriChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets the PredicateProperty objects that use this property. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "PredicatePropertyIs", "PredicateProperty")]
        public EntityCollection<PredicateProperty> PredicateProperties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PredicateProperty>("Zentity.Core.PredicatePropertyIs", "PredicateProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PredicateProperty>("Zentity.Core.PredicatePropertyIs", "PredicateProperty", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the ResourceProperty objects that use this property. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourcePropertyIs", "ResourceProperty")]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceProperty>("Zentity.Core.ResourcePropertyIs", "ResourceProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceProperty>("Zentity.Core.ResourcePropertyIs", "ResourceProperty", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the RelationshipProperty objects that use this property. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "TripletPropertyIs", "RelationshipProperty")]
        public EntityCollection<RelationshipProperty> RelationshipProperties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RelationshipProperty>("Zentity.Core.TripletPropertyIs", "RelationshipProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RelationshipProperty>("Zentity.Core.TripletPropertyIs", "RelationshipProperty", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Represents a relationship between two resources. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="Relationship")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Relationship : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Relationship object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Relationship CreateRelationship(global::System.Guid id)
        {
            Relationship relationship = new Relationship();
            relationship.Id = id;
            return relationship;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the relationship. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the ordinal position field. This field can be used by applications for ordering the relationships. For example, if the resource is &apos;authored by&apos; to two persons, this property can be used to identify in what order did those persons authored the resource. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> OrdinalPosition
        {
            get
            {
                return _OrdinalPosition;
            }
            set
            {
                OnOrdinalPositionChanging(value);
                ReportPropertyChanging("OrdinalPosition");
                _OrdinalPosition = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrdinalPosition");
                OnOrdinalPositionChanged();
            }
        }
        private Nullable<global::System.Int32> _OrdinalPosition;
        partial void OnOrdinalPositionChanging(Nullable<global::System.Int32> value);
        partial void OnOrdinalPositionChanged();
    
        /// <summary>
        /// Gets or sets the date on which this relationship was added to the repository.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateAdded;
        partial void OnDateAddedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateAddedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets or sets the predicate of the relationship. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipPredicateIs", "Predicate")]
        public Predicate Predicate
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.RelationshipPredicateIs", "Predicate").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.RelationshipPredicateIs", "Predicate").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the predicate of the relationship. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Predicate> PredicateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Predicate>("Zentity.Core.RelationshipPredicateIs", "Predicate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Predicate>("Zentity.Core.RelationshipPredicateIs", "Predicate", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the properties of this relationship. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipHasProperty", "RelationshipProperty")]
        public EntityCollection<RelationshipProperty> Properties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RelationshipProperty>("Zentity.Core.RelationshipHasProperty", "RelationshipProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RelationshipProperty>("Zentity.Core.RelationshipHasProperty", "RelationshipProperty", value);
                }
            }
        }
    
        /// <summary>
        /// Gets or sets the object resource of this relationship. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipIsAboutResource", "Resource")]
        public Resource Object
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.RelationshipIsAboutResource", "Resource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.RelationshipIsAboutResource", "Resource").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the object resource of this relationship. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Resource> ObjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.RelationshipIsAboutResource", "Resource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Resource>("Zentity.Core.RelationshipIsAboutResource", "Resource", value);
                }
            }
        }
    
        /// <summary>
        /// Gets or sets the subject resource of this relationship. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasRelationship", "Resource")]
        public Resource Subject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasRelationship", "Resource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasRelationship", "Resource").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the subject resource of this relationship. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Resource> SubjectReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasRelationship", "Resource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Resource>("Zentity.Core.ResourceHasRelationship", "Resource", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// The RelationshipProperty object provides a value for a Property on a Relationship. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="RelationshipProperty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RelationshipProperty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RelationshipProperty object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static RelationshipProperty CreateRelationshipProperty(global::System.Guid id, global::System.String value)
        {
            RelationshipProperty relationshipProperty = new RelationshipProperty();
            relationshipProperty.Id = id;
            relationshipProperty.Value = value;
            return relationshipProperty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the RelationshipProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// The value of this RelationshipProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets or sets the Property whose value is provided by this RelationshipProperty. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "TripletPropertyIs", "Property")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.TripletPropertyIs", "Property").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.TripletPropertyIs", "Property").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Property whose value is provided by this RelationshipProperty. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.TripletPropertyIs", "Property");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("Zentity.Core.TripletPropertyIs", "Property", value);
                }
            }
        }
    
        /// <summary>
        /// Gets or sets the Relationship to which this RelationshipProperty belongs. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipHasProperty", "Relationship")]
        public Relationship Relationship
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relationship>("Zentity.Core.RelationshipHasProperty", "Relationship").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relationship>("Zentity.Core.RelationshipHasProperty", "Relationship").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Relationship to which this RelationshipProperty belongs. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Relationship> RelationshipReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Relationship>("Zentity.Core.RelationshipHasProperty", "Relationship");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Relationship>("Zentity.Core.RelationshipHasProperty", "Relationship", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Represents a resource, usually the research output of an organization. 
    /// </summary>
    /// <LongDescription>
    /// Represents a resource, usually the research output of an organization. 
    /// </LongDescription>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="Resource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    [KnownTypeAttribute(typeof(File))]
    public partial class Resource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Resource object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        public static Resource CreateResource(global::System.Guid id)
        {
            Resource resource = new Resource();
            resource.Id = id;
            return resource;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the Resource. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the date on which the Resource was added in the repository. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateAdded;
        partial void OnDateAddedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// Gets or sets the date on which the Resource was last modified. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateModified
        {
            get
            {
                return _DateModified;
            }
            set
            {
                OnDateModifiedChanging(value);
                ReportPropertyChanging("DateModified");
                _DateModified = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateModified");
                OnDateModifiedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateModified;
        partial void OnDateModifiedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateModifiedChanged();
    
        /// <summary>
        /// Gets or sets the description of the Resource. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Gets or sets the title of the Resource. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Gets or sets the URI of the Resource. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Uri
        {
            get
            {
                return _Uri;
            }
            set
            {
                OnUriChanging(value);
                ReportPropertyChanging("Uri");
                _Uri = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Uri");
                OnUriChanged();
            }
        }
        private global::System.String _Uri;
        partial void OnUriChanging(global::System.String value);
        partial void OnUriChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets the relationships in which this resource participates as object.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "RelationshipIsAboutResource", "Relationship")]
        public EntityCollection<Relationship> RelationshipsAsObject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Relationship>("Zentity.Core.RelationshipIsAboutResource", "Relationship");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Relationship>("Zentity.Core.RelationshipIsAboutResource", "Relationship", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the relationships in which this resource participates as subject.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasRelationship", "Relationship")]
        public EntityCollection<Relationship> RelationshipsAsSubject
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Relationship>("Zentity.Core.ResourceHasRelationship", "Relationship");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Relationship>("Zentity.Core.ResourceHasRelationship", "Relationship", value);
                }
            }
        }
    
        /// <summary>
        /// Gets the collection of ResourceProperty objects for this resource.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasProperty", "ResourceProperty")]
        public EntityCollection<ResourceProperty> ResourceProperties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ResourceProperty>("Zentity.Core.ResourceHasProperty", "ResourceProperty");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ResourceProperty>("Zentity.Core.ResourceHasProperty", "ResourceProperty", value);
                }
            }
        }
    
        /// <summary>
        /// Gets a collection of associated File objects with this resource.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasFile", "File")]
        public EntityCollection<File> Files
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<File>("Zentity.Core.ResourceHasFile", "File");
            }
            internal set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<File>("Zentity.Core.ResourceHasFile", "File", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// The ResourceProperty object provides a value for a Property on a Resource. 
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Zentity.Core", Name="ResourceProperty")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ResourceProperty : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ResourceProperty object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static ResourceProperty CreateResourceProperty(global::System.Guid id, global::System.String value)
        {
            ResourceProperty resourceProperty = new ResourceProperty();
            resourceProperty.Id = id;
            resourceProperty.Value = value;
            return resourceProperty;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// Gets the Id value that uniquely identifies the ResourceProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Guid Id
        {
            get
            {
                return _Id;
            }
            internal set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Guid _Id;
        partial void OnIdChanging(global::System.Guid value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Gets or sets the value of this ResourceProperty. 
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// Gets or sets the Property whose value is provided by this ResourceProperty. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourcePropertyIs", "Property")]
        public Property Property
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.ResourcePropertyIs", "Property").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.ResourcePropertyIs", "Property").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Property whose value is provided by this ResourceProperty. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Property> PropertyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Property>("Zentity.Core.ResourcePropertyIs", "Property");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Property>("Zentity.Core.ResourcePropertyIs", "Property", value);
                }
            }
        }
    
        /// <summary>
        /// Gets or sets the Resource to which this ResourceProperty belongs. 
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Zentity.Core", "ResourceHasProperty", "Resource")]
        public Resource Resource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasProperty", "Resource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasProperty", "Resource").Value = value;
            }
        }
        /// <summary>
        /// Gets or sets the Resource to which this ResourceProperty belongs. 
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Resource> ResourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Resource>("Zentity.Core.ResourceHasProperty", "Resource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Resource>("Zentity.Core.ResourceHasProperty", "Resource", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
