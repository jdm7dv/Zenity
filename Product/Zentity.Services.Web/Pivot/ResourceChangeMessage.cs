// *******************************************************
//                                                        
//    Copyright (C) Microsoft. All rights reserved.       
//                                                        
// *******************************************************

using System.Diagnostics;
using System.IO;

namespace Zentity.Services.Web.Pivot
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.Serialization;

    /// <summary>
    /// Various types of changes that can be tracked.
    /// </summary>
    [DataContract]
    public enum ResourceChangeType
    {
        /// <summary>
        /// Resource is Added
        /// </summary>
        [EnumMember]
        Added,

        /// <summary>
        /// Resource is Updated
        /// </summary>
        [EnumMember]
        Updated,

        /// <summary>
        /// Resource is Deleted
        /// </summary>
        [EnumMember]
        Deleted
    }

    /// <summary>
    /// Holds a message for resource changes. These messages are generated by the management/administration service.
    /// </summary>
    [DataContract]
    public class ResourceChangeMessage
    {
        /// <summary>
        /// Gets or sets Resouce Id for Resource
        /// </summary>
        [DataMember(IsRequired = true)]
        public Guid ResourceId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Resource Type Id for Resource
        /// </summary>
        [DataMember(IsRequired = true)]
        public Guid ResourceTypeId
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Resource Type Name for Resource
        /// </summary>
        [DataMember(IsRequired = true)]
        public string ResourceTypeName
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Data Model Namespace for Resource
        /// </summary>
        [DataMember(IsRequired = true)]
        public string DataModelNamespace
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Date Added for Resource
        /// </summary>
        [DataMember]
        public DateTime? DateAdded
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Date Modified for Resource
        /// </summary>
        [DataMember]
        public DateTime? DateModified
        {
            get;
            set;
        }

        /// <summary>
        /// Gets or sets Resource Change Type
        /// </summary>
        [DataMember(IsRequired = true)]
        public ResourceChangeType ChangeType
        {
            get;
            set;
        }

        /// <summary>
        /// Deserializes the resource change message list from the provided file path.
        /// </summary>
        /// <param name="resourceChangeMessageFilePath">The serialized resource change message file path.</param>
        /// <returns>List of <see cref="ResourceChangeMessage"/>.</returns>
        public static IEnumerable<ResourceChangeMessage> DeserializeResourceChangeMessageList(string resourceChangeMessageFilePath)
        {
            if (File.Exists(resourceChangeMessageFilePath))
            {
                try
                {
                    using (FileStream resourceChangeMessageStream = new FileStream(resourceChangeMessageFilePath, FileMode.Open, FileAccess.Read))
                    {
                        DataContractSerializer dataContractSerializer = new DataContractSerializer(typeof(IEnumerable<ResourceChangeMessage>));
                        return (IEnumerable<ResourceChangeMessage>) dataContractSerializer.ReadObject(resourceChangeMessageStream);
                    }
                }
                catch (Exception exception)
                {
                    Globals.TraceMessage(TraceEventType.Error, exception.InnerException != null ? exception.InnerException.ToString() : exception.ToString(), exception.Message);
                }
            }
            else
            {
                throw new FileNotFoundException(resourceChangeMessageFilePath);
            }

            return null;
        }
    }
}
